worker_processes  1;

events {
    worker_connections  1024;
}

http {

    lua_package_path "${prefix}?.lua;${prefix}?/init.lua;${prefix}lua/?.lua;${prefix}lua/?/init.lua;${prefix}../lua_modules/?.lua;${prefix}../lua_modules/?/init.lua;${prefix}../lua_modules/lua/?.lua;${prefix}../lua_modules/lua/?/init.lua;;";
    lua_package_cpath "${prefix}clib/?.dll;${prefix}clib/?/?.dll;${prefix}?.dll;${prefix}clib/?.so;${prefix}clib/?/?.so;${prefix}?.so;${prefix}../lua_modules/clib/?.dll;${prefix}../lua_modules/clib/?/?.dll;${prefix}../lua_modules/clib/?.so;${prefix}../lua_modules/clib/?/?.so;;";

    client_body_temp_path      	 	temp/client_body_temp;
    fastcgi_temp_path           	temp/fastcgi_temp;
    proxy_temp_path             	temp/proxy_temp;
    scgi_temp_path              	temp/scgi_temp;
    uwsgi_temp_path             	temp/uwsgi_temp;

    server {
        listen       80;
        server_name  localhost;
        location / {
            content_by_lua_block {

                local ffi = require "ffi"
                local IS_64_BIT = ffi.abi('64bit')

                ngx.say ""
                ngx.say ("Hello, OpenResty! ",  ffi.os, IS_64_BIT and " 64bit" or " 32bit")
                ngx.say ""
                ngx.say "------------------------------------------"
                ngx.say ""

                local function load_lib(lib_name)
                    local pok, lib = pcall(require, lib_name)
                    if pok then
                        ngx.say(lib_name, ": ", lib._VERSION or " (ok)")
                    else
                        ngx.say(lib_name, ": ", lib)
                    end
                end

                load_lib("lfs")
                load_lib("socket")
                load_lib("utf8")
                load_lib("hashids")
                ngx.say "------------------------------------------"
                load_lib("resty.mlcache")
                load_lib("resty.template")
                load_lib("resty.http")
                load_lib("resty.iputils")
                load_lib("resty.iconv")

                ngx.say ""
                ngx.say "------------------------------------------"
                ngx.say ""

                ffi.cdef[[
                const char *zlibVersion();
                const char *OpenSSL_version(int t);
                const char *ngx_http_lua_ffi_pcre_version(void);
                ]]

                local zlibVersion = ffi.string(ffi.C.zlibVersion())
                ngx.say("zlibVersion: ", zlibVersion)

                local OpenSSL_version = ffi.string(ffi.C.OpenSSL_version(0))
                ngx.say("OpenSSL_version: ", OpenSSL_version)

                local pcre_version = ffi.string(ffi.C.ngx_http_lua_ffi_pcre_version())
                ngx.say("pcre_version: ", pcre_version)

                ngx.say ""
                ngx.say "------------------------------------------"
                ngx.say ""
                ngx.say ( "ngx.config.subsystem          ", ngx.config.subsystem       )
                ngx.say ( "ngx.config.debug              ", ngx.config.debug           )
                ngx.say ( "ngx.config.prefix()           ", ngx.config.prefix()        )
                ngx.say ( "ngx.config.nginx_version      ", ngx.config.nginx_version   )
                ngx.say ( "ngx.config.ngx_lua_version    ", ngx.config.ngx_lua_version )

                ngx.say ""
                ngx.say "------------------------------------------"
                ngx.say ""

                local conf = ngx.config.nginx_configure()
                conf = string.gsub(conf, "--prefix", "\n--prefix")
                conf = string.gsub(conf, "--with-", "\n--with-")
                conf = string.gsub(conf, "--add-", "\n--add-")
                ngx.say ( "ngx.config.nginx_configure()")
                ngx.say ( conf )
                ngx.say ""
                ngx.say "------------------------------------------"
                ngx.say ""
                ngx.say "package.path: "
                ngx.say ""
                local path = string.gsub(package.path, ";", "\n")
                ngx.say (path)
                ngx.say ""
                ngx.say "------------------------------------------"
                ngx.say ""
                ngx.say "package.cpath: "
                ngx.say ""
                local cpath = string.gsub(package.cpath, ";", "\n")
                ngx.say (cpath)
                ngx.say ""

            }
        }
    }
}
